#!/usr/bin/env python3
# seed_direct.py
# Script pour ins√©rer directement les questions dans la base de donn√©es SQLite

import sqlite3
import json
from typing import List, Dict, Any

def make_q(position: int, title: str, text: str, options: List[str], correct_index: int, image: str = "") -> Dict[str, Any]:
    """
    Construit un dictionnaire question compatible avec la base de donn√©es
    """
    answers = []
    for i, opt in enumerate(options, start=1):
        answers.append({
            "text": opt,
            "position": i,
            "isCorrect": (i - 1) == correct_index
        })
    return {
        "title": title,
        "text": text,
        "image": image,
        "position": position,
        "answers": answers
    }

def build_questions() -> List[Dict[str, Any]]:
    q: List[Dict[str, Any]] = []
    pos = 1

    # -------- Clash Royale (10) --------
    q.append(make_q(pos, "Clash Royale ‚Äî Ressource principale",
                    "Quelle est la ressource utilis√©e pour poser des cartes ?",
                    ["Or", "√âlixir", "Gemmes", "Mana"], correct_index=1)); pos += 1

    q.append(make_q(pos, "Clash Royale ‚Äî Nombre de tours",
                    "Combien de tours poss√®de chaque joueur au d√©but d'une partie ?",
                    ["1", "2", "3", "4"], correct_index=2)); pos += 1

    q.append(make_q(pos, "Clash Royale ‚Äî Carte l√©gendaire",
                    "Quelle carte l√©gendaire saute et √©crase les troupes en zone ?",
                    ["M√©ga chevalier", "Prince", "Golem", "Chevaucheur de cochon"], correct_index=0)); pos += 1

    q.append(make_q(pos, "Clash Royale ‚Äî Premi√®re ar√®ne",
                    "Quelle ar√®ne est d√©bloqu√©e en premier dans le jeu ?",
                    ["Ar√®ne l√©gendaire", "Ar√®ne gobeline", "Camp d'entra√Ænement", "Ar√®ne royale"], correct_index=2)); pos += 1

    q.append(make_q(pos, "Clash Royale ‚Äî Ladder",
                    "Combien de troph√©es gagne-t-on typiquement par victoire en ladder (hors ligues) ?",
                    ["10", "20", "30", "50"], correct_index=2)); pos += 1

    q.append(make_q(pos, "Clash Royale ‚Äî Sort",
                    "Laquelle de ces cartes est un sort ?",
                    ["Mousquetaire", "Boule de feu", "G√©ant", "Prince t√©n√©breux"], correct_index=1)); pos += 1

    q.append(make_q(pos, "Clash Royale ‚Äî Raret√©",
                    "Quelle raret√© est la plus √©lev√©e dans Clash Royale ?",
                    ["Commune", "Rare", "√âpique", "L√©gendaire"], correct_index=3)); pos += 1

    q.append(make_q(pos, "Clash Royale ‚Äî Guerre de clans",
                    "Combien de joueurs participent √† une guerre de clans (maximum) ?",
                    ["10", "20", "30", "50"], correct_index=3)); pos += 1

    q.append(make_q(pos, "Clash Royale ‚Äî Charge",
                    "Quelle troupe charge et inflige des d√©g√¢ts doubl√©s sur sa premi√®re attaque ?",
                    ["Prince", "Arbal√®te", "Sorcier", "Chevalier"], correct_index=0)); pos += 1

    q.append(make_q(pos, "Clash Royale ‚Äî B√¢timent squelette",
                    "Quelle carte invoque des squelettes en continu jusqu'√† destruction ?",
                    ["Arm√©e de squelettes", "Cimeti√®re", "Cabane de gobelins", "Tombeau"], correct_index=3)); pos += 1

    # -------- Clash of Clans (10) --------
    q.append(make_q(pos, "Clash of Clans ‚Äî Ressource d'entra√Ænement",
                    "Quelle ressource permet d'entra√Æner des troupes ?",
                    ["√âlixir", "Or", "Gemmes", "Pierre"], correct_index=0)); pos += 1

    q.append(make_q(pos, "Clash of Clans ‚Äî D√©fense de base",
                    "Quel b√¢timent d√©fensif tire des fl√®ches sur les ennemis ?",
                    ["Cabane", "Tour de l'archer", "H√¥tel de ville", "Mine"], correct_index=1)); pos += 1

    q.append(make_q(pos, "Clash of Clans ‚Äî Priorit√©",
                    "Quel b√¢timent est le plus important √† prot√©ger ?",
                    ["Caserne", "H√¥tel de ville", "Camp militaire", "Laboratoire"], correct_index=1)); pos += 1

    q.append(make_q(pos, "Clash of Clans ‚Äî Ressources principales",
                    "Combien de ressources principales existent (hors gemmes) ?",
                    ["2", "3", "4", "5"], correct_index=1)); pos += 1

    q.append(make_q(pos, "Clash of Clans ‚Äî Troupe de base",
                    "Quelle troupe de base est disponible d√®s le d√©but ?",
                    ["Barbare", "Dragon", "P.E.K.K.A", "Gu√©risseuse"], correct_index=0)); pos += 1

    q.append(make_q(pos, "Clash of Clans ‚Äî √âtoiles",
                    "Que se passe-t-il si ton H√¥tel de ville est d√©truit ?",
                    ["Rien", "Tu gagnes", "Tu perds une √©toile", "Tu obtiens un bonus"], correct_index=2)); pos += 1

    q.append(make_q(pos, "Clash of Clans ‚Äî Cible prioritaire",
                    "Quelle troupe attaque les d√©fenses en priorit√© ?",
                    ["Barbares", "Archers", "G√©ants", "Sorciers"], correct_index=2)); pos += 1

    q.append(make_q(pos, "Clash of Clans ‚Äî Ligue",
                    "Quelle ligue est la plus prestigieuse ?",
                    ["Argent", "Or", "Cristal", "L√©gende"], correct_index=3)); pos += 1

    q.append(make_q(pos, "Clash of Clans ‚Äî Vitesse",
                    "Quel sort rend tes troupes plus rapides (et plus offensives) ?",
                    ["Sort de soin", "Sort de rage", "Sort de gel", "Sort de foudre"], correct_index=1)); pos += 1

    q.append(make_q(pos, "Clash of Clans ‚Äî Vol",
                    "Quelle troupe peut voler au-dessus des murs ?",
                    ["Barbare", "Dragon", "G√©ant", "Golem"], correct_index=1)); pos += 1

    return q

def insert_questions_direct():
    """Ins√®re directement les questions dans la base de donn√©es SQLite"""
    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()
    
    # Vider les tables existantes
    cursor.execute('DELETE FROM Answer')
    cursor.execute('DELETE FROM Question')
    conn.commit()
    
    questions = build_questions()
    created = 0
    
    for question in questions:
        try:
            # Ins√©rer la question
            cursor.execute('''
                INSERT INTO Question (title, text, position, image)
                VALUES (?, ?, ?, ?)
            ''', (question['title'], question['text'], question['position'], question['image']))
            
            question_id = cursor.lastrowid
            
            # Ins√©rer les r√©ponses
            for answer in question['answers']:
                cursor.execute('''
                    INSERT INTO Answer (question_id, text, isCorrect, position)
                    VALUES (?, ?, ?, ?)
                ''', (question_id, answer['text'], answer['isCorrect'], answer['position']))
            
            created += 1
            print(f"‚úì Question {question['position']}: {question['title']}")
            
        except Exception as e:
            print(f"‚úó Erreur pour question {question['position']}: {e}")
    
    conn.commit()
    conn.close()
    
    print(f"\nüéâ Termin√© ! {created} questions cr√©√©es dans la base de donn√©es.")

if __name__ == "__main__":
    insert_questions_direct()


